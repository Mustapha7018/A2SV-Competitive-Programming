class Node:

    def __init__(self, val=None):
        self.val = val
        self.next = None

class MyLinkedList:

    def __init__(self):
        self.head = None

    def get(self, index: int) -> int:

        curr = self.head
        count = 0
        while curr:
            if count == index:
                return curr.val
            count += 1
            curr = curr.next
        return -1  # Return -1 if index is out of bounds

    def addAtHead(self, val: int) -> None:
        new_node = Node(val)
        new_node.next = self.head
        self.head = new_node

    def addAtTail(self, val: int) -> None:
        new_node = Node(val)

        if self.head is None:
            self.head = new_node
            return 
        last = self.head

        while last.next:
            last = last.next
        last.next = new_node

        

    def addAtIndex(self, index: int, val: int) -> None:
        new_node = Node(val)
        if index == 0:
            self.addAtHead(val)
            return
        current = self.head
        count = 0
        while current:
            if count == index - 1:
                new_node.next = current.next
                current.next = new_node
                return
            count += 1
            current = current.next

    def deleteAtIndex(self, index: int) -> None:
        if not self.head:
            return
        if index == 0:
            self.head = self.head.next
            return
        curr = self.head
        count = 0
        while curr and count < index-1:
            curr = curr.next
            count += 1
        if curr and curr.next:
            curr.next = curr.next.next
            return
            





    # def printList(self):
    #     current = self.head
    #     while current !=None:
    #         print(current.val)
    #         current = current.next




# Your MyLinkedList object will be instantiated and called as such:
# obj = MyLinkedList()
# param_1 = obj.get(index)
# obj.addAtHead(val)
# obj.addAtTail(val)
# obj.addAtIndex(index,val)
# obj.deleteAtIndex(index)
