class Node:
    def __init__(self, value=None):
        self.value = value
        self.next = None

class MyCircularQueue:

    def __init__(self, k: int):
        self.head = None
        self.tail = None
        self.size = 0
        self.max_size = k

    def enQueue(self, value: int) -> bool:
        if self.size == self.max_size:
            return False
        
        new_node = Node(value)
        
        if self.size == 0:
            self.head = new_node
            self.tail = new_node
            # new_node.next = new_node
            self.size += 1
            return True

        self.head = new_node
        self.size += 1
        return True
        

    def deQueue(self) -> bool:
        if not self.tail:
            return
        
        while self.tail:
            self.tail = self.tail.next
        
        return True



        

    def Front(self) -> int:
        pass
        

    def Rear(self) -> int:
        pass
        

    def isEmpty(self) -> bool:
        if self.size and self.max_size == 0:
            return True
        
        

    def isFull(self) -> bool:
        pass
        


# Your MyCircularQueue object will be instantiated and called as such:
# obj = MyCircularQueue(k)
# param_1 = obj.enQueue(value)
# param_2 = obj.deQueue()
# param_3 = obj.Front()
# param_4 = obj.Rear()
# param_5 = obj.isEmpty()
# param_6 = obj.isFull()
