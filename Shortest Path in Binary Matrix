class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:

        n = len(grid)
        
        if grid[0][0] == 1 or grid[n-1][n-1] == 1:
            return -1

        queue = deque([((0, 0), 1)])
        visited = set([(0, 0)])

        valid_moves = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]

        while queue:
            (r, c), dist = queue.popleft()

            if r == n-1 and c == n-1:
                return dist

            for dr, dc in valid_moves:
                new_r, new_c = r + dr, c + dc
                if 0 <= new_r < n and 0 <= new_c < n and grid[new_r][new_c] == 0 and (new_r, new_c) not in visited:
                    queue.append(((new_r, new_c), dist + 1))
                    visited.add((new_r, new_c))

        return -1
