class Solution:
    def validPath(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:

        graph = defaultdict(list)

        if not edges:
            return True

        for k, v in edges:
            graph[k].append(v)
            graph[v].append(k)

        visited = set()

        def dfs(vertex, visited):
            if vertex == destination:
                return True

            visited.add(vertex)

            for neighbor in graph[vertex]:
                if neighbor not in visited:
                    if dfs(neighbor, visited):
                        return True

            return False

        return dfs(source, visited)
