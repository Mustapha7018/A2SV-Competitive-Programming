===== APPROACH 1 (CYCLIC SORT) =====

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:

        output = []
        N = len(nums)


        for i in range(N):
            while nums[i] != i and 0 <= nums[i] < N and nums[nums[i]] != nums[i]:
                nums[nums[i]], nums[i] = nums[i], nums[nums[i]]

        
        for i in range(1, N):
            if nums[i] != i:
                output.append(i)
        
        return output if N in nums else (output + [N])



===== APPROACH 2 =====

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:
        sett = set(nums)
        N = len(nums)
        return [i for i in range(1, N+1) if i not in sett]



===== APPROACH 3 =====

class Solution:
    def findDisappearedNumbers(self, nums: List[int]) -> List[int]:

        output = []
        sett = set(nums)
        N = len(nums)

        for i in range(1, N+1):
            if i not in sett:
                output.append(i)
        
        return output


        
