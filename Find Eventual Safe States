class Solution:
    def eventualSafeNodes(self, graph: List[List[int]]) -> List[int]:

        adj_list = defaultdict(list)
        hashmap = {i: 0 for i in range(len(graph))}
        res = []
        queue = deque()

        for i in range(len(graph)):
            for val in graph[i]:
                adj_list[val].append(i)
                hashmap[i] += 1
        
        for node in hashmap:
            if hashmap[node] == 0:
                queue.append(node)

        while queue:
            curr_node = queue.popleft()
            res.append(curr_node)

            for neighbor in adj_list[curr_node]:
                hashmap[neighbor] -= 1
                if hashmap[neighbor] == 0:
                    queue.append(neighbor)

        return sorted(res)
            

        

